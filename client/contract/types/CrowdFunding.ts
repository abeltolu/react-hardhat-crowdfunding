/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace CrowdFunding {
  export type CampaignSummaryStruct = {
    owner: PromiseOrValue<string>;
    title: PromiseOrValue<string>;
    category: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    story: PromiseOrValue<string>;
    fundingGoal: PromiseOrValue<BigNumberish>;
    image: PromiseOrValue<string>;
    endDate: PromiseOrValue<BigNumberish>;
    availableFunds: PromiseOrValue<BigNumberish>;
    totalFundsReceived: PromiseOrValue<BigNumberish>;
    isFundsWithdrawn: PromiseOrValue<boolean>;
    status: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    fundersCount: PromiseOrValue<BigNumberish>;
    withdrawalCount: PromiseOrValue<BigNumberish>;
  };

  export type CampaignSummaryStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    title: string;
    category: string;
    description: string;
    story: string;
    fundingGoal: BigNumber;
    image: string;
    endDate: BigNumber;
    availableFunds: BigNumber;
    totalFundsReceived: BigNumber;
    isFundsWithdrawn: boolean;
    status: number;
    createdAt: BigNumber;
    fundersCount: BigNumber;
    withdrawalCount: BigNumber;
  };

  export type CampaignFunderStruct = {
    funderAddress: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    message: PromiseOrValue<string>;
  };

  export type CampaignFunderStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    funderAddress: string;
    amount: BigNumber;
    timestamp: BigNumber;
    message: string;
  };

  export type WithdrawalStruct = {
    amount: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type WithdrawalStructOutput = [BigNumber, BigNumber] & {
    amount: BigNumber;
    timestamp: BigNumber;
  };
}

export interface CrowdFundingInterface extends utils.Interface {
  functions: {
    "allCampaigns()": FunctionFragment;
    "campaignById(uint256)": FunctionFragment;
    "campaignFunders(uint256)": FunctionFragment;
    "campaignWithdrawals(uint256)": FunctionFragment;
    "contractOwner()": FunctionFragment;
    "createCampaign(string,string,string,string,string,uint256,uint256)": FunctionFragment;
    "fundCampaign(uint256,string)": FunctionFragment;
    "switchStatus(uint256)": FunctionFragment;
    "userCampaigns()": FunctionFragment;
    "withdrawFunds(uint256)": FunctionFragment;
    "withdrawProfit()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allCampaigns"
      | "campaignById"
      | "campaignFunders"
      | "campaignWithdrawals"
      | "contractOwner"
      | "createCampaign"
      | "fundCampaign"
      | "switchStatus"
      | "userCampaigns"
      | "withdrawFunds"
      | "withdrawProfit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignFunders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignWithdrawals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fundCampaign",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "switchStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProfit",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "allCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignFunders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProfit",
    data: BytesLike
  ): Result;

  events: {
    "CampaignCreated(uint256)": EventFragment;
    "CampaignFundReceived(uint256,address,uint256)": EventFragment;
    "CampaignFundWithdrawn(uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CampaignCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignFundReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignFundWithdrawn"): EventFragment;
}

export interface CampaignCreatedEventObject {
  campaignId: BigNumber;
}
export type CampaignCreatedEvent = TypedEvent<
  [BigNumber],
  CampaignCreatedEventObject
>;

export type CampaignCreatedEventFilter = TypedEventFilter<CampaignCreatedEvent>;

export interface CampaignFundReceivedEventObject {
  campaignId: BigNumber;
  funderAddress: string;
  amount: BigNumber;
}
export type CampaignFundReceivedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  CampaignFundReceivedEventObject
>;

export type CampaignFundReceivedEventFilter =
  TypedEventFilter<CampaignFundReceivedEvent>;

export interface CampaignFundWithdrawnEventObject {
  campaignId: BigNumber;
  receipient: string;
  amountDebited: BigNumber;
  amountSent: BigNumber;
}
export type CampaignFundWithdrawnEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  CampaignFundWithdrawnEventObject
>;

export type CampaignFundWithdrawnEventFilter =
  TypedEventFilter<CampaignFundWithdrawnEvent>;

export interface CrowdFunding extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrowdFundingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allCampaigns(
      overrides?: CallOverrides
    ): Promise<[CrowdFunding.CampaignSummaryStructOutput[]]>;

    campaignById(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CrowdFunding.CampaignSummaryStructOutput]>;

    campaignFunders(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CrowdFunding.CampaignFunderStructOutput[]]>;

    campaignWithdrawals(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CrowdFunding.WithdrawalStructOutput[]]>;

    contractOwner(overrides?: CallOverrides): Promise<[string]>;

    createCampaign(
      _title: PromiseOrValue<string>,
      _category: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _story: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _fundingGoal: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    switchStatus(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userCampaigns(
      overrides?: CallOverrides
    ): Promise<[CrowdFunding.CampaignSummaryStructOutput[]]>;

    withdrawFunds(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawProfit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allCampaigns(
    overrides?: CallOverrides
  ): Promise<CrowdFunding.CampaignSummaryStructOutput[]>;

  campaignById(
    _campaignId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CrowdFunding.CampaignSummaryStructOutput>;

  campaignFunders(
    _campaignId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CrowdFunding.CampaignFunderStructOutput[]>;

  campaignWithdrawals(
    _campaignId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CrowdFunding.WithdrawalStructOutput[]>;

  contractOwner(overrides?: CallOverrides): Promise<string>;

  createCampaign(
    _title: PromiseOrValue<string>,
    _category: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _story: PromiseOrValue<string>,
    _image: PromiseOrValue<string>,
    _fundingGoal: PromiseOrValue<BigNumberish>,
    _endDate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundCampaign(
    _campaignId: PromiseOrValue<BigNumberish>,
    _message: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  switchStatus(
    _campaignId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userCampaigns(
    overrides?: CallOverrides
  ): Promise<CrowdFunding.CampaignSummaryStructOutput[]>;

  withdrawFunds(
    _campaignId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawProfit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allCampaigns(
      overrides?: CallOverrides
    ): Promise<CrowdFunding.CampaignSummaryStructOutput[]>;

    campaignById(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CrowdFunding.CampaignSummaryStructOutput>;

    campaignFunders(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CrowdFunding.CampaignFunderStructOutput[]>;

    campaignWithdrawals(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CrowdFunding.WithdrawalStructOutput[]>;

    contractOwner(overrides?: CallOverrides): Promise<string>;

    createCampaign(
      _title: PromiseOrValue<string>,
      _category: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _story: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _fundingGoal: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    switchStatus(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userCampaigns(
      overrides?: CallOverrides
    ): Promise<CrowdFunding.CampaignSummaryStructOutput[]>;

    withdrawFunds(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProfit(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CampaignCreated(uint256)"(
      campaignId?: PromiseOrValue<BigNumberish> | null
    ): CampaignCreatedEventFilter;
    CampaignCreated(
      campaignId?: PromiseOrValue<BigNumberish> | null
    ): CampaignCreatedEventFilter;

    "CampaignFundReceived(uint256,address,uint256)"(
      campaignId?: PromiseOrValue<BigNumberish> | null,
      funderAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): CampaignFundReceivedEventFilter;
    CampaignFundReceived(
      campaignId?: PromiseOrValue<BigNumberish> | null,
      funderAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): CampaignFundReceivedEventFilter;

    "CampaignFundWithdrawn(uint256,address,uint256,uint256)"(
      campaignId?: PromiseOrValue<BigNumberish> | null,
      receipient?: PromiseOrValue<string> | null,
      amountDebited?: null,
      amountSent?: null
    ): CampaignFundWithdrawnEventFilter;
    CampaignFundWithdrawn(
      campaignId?: PromiseOrValue<BigNumberish> | null,
      receipient?: PromiseOrValue<string> | null,
      amountDebited?: null,
      amountSent?: null
    ): CampaignFundWithdrawnEventFilter;
  };

  estimateGas: {
    allCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    campaignById(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignFunders(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignWithdrawals(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractOwner(overrides?: CallOverrides): Promise<BigNumber>;

    createCampaign(
      _title: PromiseOrValue<string>,
      _category: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _story: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _fundingGoal: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    switchStatus(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawProfit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allCampaigns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaignById(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignFunders(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignWithdrawals(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCampaign(
      _title: PromiseOrValue<string>,
      _category: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _story: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _fundingGoal: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    switchStatus(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userCampaigns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFunds(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProfit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
